«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::properties»

«DEFINE openJpa FOR Application-»
	«IF isJodaDateTimeLibrary()»
	    «EXPAND jodaStrategy»
	«ENDIF»
    «IF containsNonOrdinaryEnums()»
        «EXPAND enumStrategy»
    «ENDIF»
    «IF isTestToBeGenerated()»
    	«EXPAND testDdl»
    «ENDIF»
«ENDDEFINE »

«DEFINE jodaStrategy FOR Application»
«FILE javaFileName(basePackage +".util.JodaHandler")-»
package «basePackage».util;

import org.apache.openjpa.jdbc.identifier.DBIdentifier;
import org.apache.openjpa.jdbc.kernel.JDBCStore;
import org.apache.openjpa.jdbc.meta.ValueMapping;
import org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler;
import org.apache.openjpa.jdbc.schema.Column;
import org.apache.openjpa.jdbc.schema.ColumnIO;
import org.apache.openjpa.jdbc.sql.DBDictionary;
import org.apache.openjpa.meta.JavaTypes;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

@SuppressWarnings("serial")
public class JodaHandler extends AbstractValueHandler {

    @Override
    public Object toObjectValue(ValueMapping vm, Object value) {
        if (value == null) {
            return null;
        }
        if ("LocalDate".equals(vm.getType().getSimpleName())) {
            return new LocalDate(value);
        }
        else if ("DateTime".equals(vm.getType().getSimpleName())) {
            return new DateTime(value);
        }
        else {
            throw new IllegalArgumentException(
                    "value can not be converted to LocalDate/DateTime");
        }
    }

    @Override
    public Object toDataStoreValue(ValueMapping vm, Object value, JDBCStore store) {
        if (value == null) {
            return null;
        }
        if (value instanceof DateTime) {
            return ((DateTime) value).toDate();
        }
        else if (value instanceof LocalDate) {
            return ((LocalDate) value).toDateTimeAtStartOfDay().toDate();
        }
        else {
            throw new IllegalArgumentException(
                    "value is not of type LocalDate/DateTime");
        }
    }

    @Deprecated
    public Column[] map(ValueMapping vm, String name, ColumnIO io, boolean adapt) {
        DBDictionary dict = vm.getMappingRepository().getDBDictionary();
        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);
        return map(vm, colName, io, adapt);
    }

    public Column[] map(ValueMapping vm, DBIdentifier name, ColumnIO io, boolean adapt) {
        Column col = new Column();
        col.setIdentifier(name);
        col.setJavaType(JavaTypes.DATE);
        return new Column[] { col };
    }

    @Override
    public boolean isVersionable(ValueMapping vm) {
        return true;
    }
}
«ENDFILE»
«ENDDEFINE»

«DEFINE enumStrategy FOR Application»
«FILE javaFileName(basePackage +".util.EnumHandler")-»
package «basePackage».util;

import org.apache.openjpa.jdbc.kernel.JDBCStore;
import org.apache.openjpa.jdbc.meta.ValueMapping;
import org.apache.openjpa.jdbc.meta.strats.EnumValueHandler;

import org.fornax.cartridges.sculptor.framework.util.EnumHelper;

@SuppressWarnings("serial")
public class EnumHandler extends EnumValueHandler {

    @Override
    public Object toObjectValue(ValueMapping vm, Object value) {
        if (value == null) {
            return null;
        }
        try {
            return EnumHelper.toEnum(vm.getType(), value);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    @Override
    public Object toDataStoreValue(ValueMapping vm, Object value,
        JDBCStore store) {
        if (value == null) {
            return null;
        }
        try {
            return EnumHelper.toData((Enum)value);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
«ENDFILE»
«ENDDEFINE»

«REM»
    This is hopefully a temporary workaround for OpenJPA.
    OpenJPA is not generating primary keys on manytomany jointables
«ENDREM»
«DEFINE testDdl FOR Application»
«LET resolveManyToManyRelations(true) AS manyToManyRelations»
    «FILE "dbunit/ddl.sql" TO_GEN_RESOURCES_TEST»
    «EXPAND templates::db::OracleDDL::manyToManyPrimaryKey FOREACH manyToManyRelations»
    «ENDFILE»
«ENDLET»
«ENDDEFINE »
