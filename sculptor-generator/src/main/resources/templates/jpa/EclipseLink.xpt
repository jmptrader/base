«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::properties»

«DEFINE eclipseLink FOR Application-»
    «EXPAND mapping»
    «IF isJodaDateTimeLibrary()»
	    «EXPAND jodaConverterClass»
    «ENDIF»
    «IF containsNonOrdinaryEnums()»
        «EXPAND enumConverterClass»
    «ENDIF»
«ENDDEFINE »

«DEFINE header FOR Application »
<?xml version="1.0" encoding="utf-8" ?>
<entity-mappings
	xmlns="http://www.eclipse.org/eclipselink/xsds/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	version="1.0">
«ENDDEFINE »

«DEFINE footer FOR Application »
</entity-mappings>
«ENDDEFINE »

«DEFINE mapping FOR Application»
«FILE "/META-INF/orm.xml" TO_GEN_RESOURCES-»
	«EXPAND header»
	«EXPAND enumConverter»
    «IF isJodaDateTimeLibrary()»
		«EXPAND jodaConverter»
	«ENDIF»
	«EXPAND footer»
«ENDFILE »
«ENDDEFINE»

«DEFINE enumConverter FOR Application»
<converter name="EnumConverter" class="«basePackage».util.EnumConverter"></converter>
«ENDDEFINE »

«DEFINE jodaConverter FOR Application»
<converter name="JodaConverter" class="«basePackage».util.JodaConverter"></converter>
«ENDDEFINE »

«DEFINE jodaConverterClass FOR Application»
«FILE javaFileName(basePackage +".util.JodaConverter")-»
package «basePackage».util;

import org.eclipse.persistence.mappings.DatabaseMapping;
import org.eclipse.persistence.mappings.converters.Converter;
import org.eclipse.persistence.sessions.Session;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

@SuppressWarnings("serial")
public class JodaConverter implements Converter {
    private Class<?> dateClass;

    public Object convertDataValueToObjectValue(Object dataValue, Session session) {
        if ("LocalDate".equals(dateClass.getSimpleName())) {
            return new LocalDate(dataValue);
        }
        if ("DateTime".equals(dateClass.getSimpleName())) {
            return new DateTime(dataValue);
        }
        else {
            throw new IllegalArgumentException("dataValue can not be converted to LocalDate/DateTime");
        }
    }

    public Object convertObjectValueToDataValue(Object objectValue, Session session) {
        if (objectValue instanceof DateTime) {
            return ((DateTime) objectValue).toDate();
        }
        else if (objectValue instanceof LocalDate) {
            return ((LocalDate) objectValue).toDateTimeAtStartOfDay().toDate();
        }
        else {
            throw new IllegalArgumentException("objectValue is not of type LocalDate/DateTime");
        }
    }

    public void initialize(DatabaseMapping mapping, Session session) {
        dateClass = mapping.getAttributeClassification();
    }

    public boolean isMutable() {
        return false;
    }
}
«ENDFILE»
«ENDDEFINE»

«DEFINE enumConverterClass FOR Application»
«FILE javaFileName(basePackage +".util.EnumConverter")-»
package «basePackage».util;

import org.eclipse.persistence.mappings.DatabaseMapping;
import org.eclipse.persistence.mappings.converters.Converter;
import org.eclipse.persistence.sessions.Session;

import org.fornax.cartridges.sculptor.framework.util.EnumHelper;

@SuppressWarnings("serial")
public class EnumConverter implements Converter {
    private Class<?> enumClass;

    @SuppressWarnings("unchecked")
    public Enum convertDataValueToObjectValue(Object dataValue, Session session) {
        return EnumHelper.toEnum(enumClass, dataValue);
    }

    @SuppressWarnings("unchecked")
    public Object convertObjectValueToDataValue(Object objectValue,
        Session session) {
        if (objectValue instanceof Enum) {
            return EnumHelper.toData((Enum) objectValue);
        } else {
            throw new IllegalArgumentException(
                "objectValue is not of type Enum");
        }
    }

    public void initialize(DatabaseMapping mapping, Session session) {
        enumClass = mapping.getAttributeClassification();
    }

    public boolean isMutable() {
        return false;
    }
}
«ENDFILE»
«ENDDEFINE»
