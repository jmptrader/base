«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::properties»

«DEFINE hibernate FOR Application-»
	«IF isJpa1()»
		«EXPAND enumTypedefFile FOREACH modules»e
		«IF isJpaAnnotationToBeGenerated()»
			«EXPAND hibenateCfgFile»
		«ENDIF»
	«ENDIF»
	«IF isJpa2() && containsNonOrdinaryEnums()»
        «EXPAND enumType»
	«ENDIF»
«ENDDEFINE »

«DEFINE header FOR Object »
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<hibernate-mapping>
«ENDDEFINE »

«DEFINE enumTypedefFile FOR Module»
«LET domainObjects.typeSelect(Enum) AS enums»
    «IF !enums.isEmpty»
        «FILE getResourceDir("hibernate") + getEnumTypeDefFileName() TO_GEN_RESOURCES-»
            «EXPAND header »
            «EXPAND enumTypedef FOREACH enums»
        </hibernate-mapping>
        «ENDFILE »
    «ENDIF»
«ENDLET»
«ENDDEFINE»

«DEFINE enumTypedef FOR Enum»
«LET getIdentifierAttribute() AS identifierAttribute »
  <typedef name="«name»"
      class="«enumUserTypeClass()»">
    <param name="enumClass">«getDomainPackage()».«name»</param>
    «IF identifierAttribute != null »
    <param name="identifierMethod">«identifierAttribute.getGetAccessor()»</param>
    <param name="valueOfMethod">from«identifierAttribute.name.toFirstUpper()»</param>
    «ENDIF»
  </typedef>
«ENDLET»
«ENDDEFINE»

«DEFINE enumReference(String dbColumnPrefix) FOR Reference»
  <property name="«name»" type="«to.name»" «IF !nullable» not-null="true"«ENDIF»  «IF (getDatabaseName(dbColumnPrefix, this)) != name.toUpperCase()»column="«getDatabaseName(dbColumnPrefix, this)»"«ENDIF»/>
«ENDDEFINE»

«DEFINE hibenateCfgFile FOR Application»
	«FILE "hibernate.cfg.xml" TO_GEN_RESOURCES-»
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

	<hibernate-configuration>
	    <session-factory>
	    «EXPAND hibenateCfgMappedResources»
		«REM»extension point for additional configuration of the Hibernate SessionFactory«ENDREM»
		<!-- add additional configuration properties in SpecialCases.xpt by "AROUND templates::jpa::Hibernate::hibenateCfgAdditions FOR Application" -->
	    «EXPAND hibenateCfgAdditions»
	    </session-factory>
	</hibernate-configuration>
    «ENDFILE »
«ENDDEFINE»

«DEFINE hibenateCfgMappedResources FOR Application»
	«EXPAND hibenateCfgMappedResources FOREACH modules.sortBy(e|e.name)»
«ENDDEFINE»

«DEFINE hibenateCfgMappedResources FOR Module»
	«REM»set mapping of Hibernate Types here, can't be set in persistence.xml«ENDREM»
	«IF !domainObjects.typeSelect(Enum).isEmpty»
	<mapping resource="«getResourceDir("hibernate") + getEnumTypeDefFileName()»"/>
	«ENDIF»
«ENDDEFINE»

«REM»extension point for additional configuration of the Hibernate SessionFactory«ENDREM»
«DEFINE hibenateCfgAdditions FOR Application»
«ENDDEFINE»

«DEFINE enumType FOR Application»
«FILE javaFileName(basePackage + ".util.EnumUserType")-»
package «basePackage».util;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Properties;

import org.fornax.cartridges.sculptor.framework.util.EnumHelper;
import org.hibernate.HibernateException;
«IF isJpaProviderHibernate4()»
import org.hibernate.engine.spi.SessionImplementor;
«ENDIF»
import org.hibernate.type.EnumType;

@SuppressWarnings("serial")
public class EnumUserType extends EnumType {
    @Override
    public Object nullSafeGet(ResultSet rs, String[] names«IF isJpaProviderHibernate4()»,SessionImplementor session«ENDIF», Object owner)
        throws HibernateException, SQLException {
        Object object = rs.getObject(names[0]);
        if (rs.wasNull()) {
            return null;
        }
        return EnumHelper.toEnum(returnedClass(), object);
    }

    @SuppressWarnings("rawtypes")
    @Override
    public void nullSafeSet(PreparedStatement st, Object value, int index«IF isJpaProviderHibernate4()»,SessionImplementor session«ENDIF»)
        throws HibernateException, SQLException {
        if (value == null) {
            st.setNull(index, sqlTypes()[0]);
        } else {
            st.setObject(index, EnumHelper.toData((Enum) value), sqlTypes()[0]);
        }
    }

    @Override
    public void setParameterValues(Properties properties) {
        // set default type to varchar
        super.setParameterValues(properties);
        try {
            returnedClass().getMethod("fromValue",String.class);
            properties.setProperty(TYPE,properties.getProperty(TYPE, "" + Types.VARCHAR));
        } catch (Exception e) {
            properties.setProperty(TYPE,properties.getProperty(TYPE, "" + Types.INTEGER));
        }
        super.setParameterValues(properties);
    }
}
«ENDFILE»
«ENDDEFINE»
